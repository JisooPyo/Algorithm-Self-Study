package leetcode.al2404;

import java.util.LinkedList;
import java.util.Queue;

public class Leet200 {
    public static void main(String[] args) {
        Leet200 l = new Leet200();
        char[][] grid1 = {
            {'1', '1', '1', '1', '0'},
            {'1', '1', '0', '1', '0'},
            {'1', '1', '0', '0', '0'},
            {'0', '0', '0', '0', '0'}
        };
        char[][] grid2 = {
            {'1', '1', '0', '0', '0'},
            {'1', '1', '0', '0', '0'},
            {'0', '0', '1', '0', '0'},
            {'0', '0', '0', '1', '1'}
        };

        char[][] grid3 = {
            {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'},
            {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'},
            {'1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'},
            {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'},
            {'1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
            {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}
        };

        // System.out.println(l.numIslands(grid1));    // 1
        // System.out.println(l.numIslands(grid2));    // 3
        System.out.println(l.numIslands(grid3));
    }
    char[][] grid;
    int height;
    int width;
    boolean[][] visited;
    Queue<int[]> queue;

    // 내 풀이: Queue를 이용한 BFS로 풀이
    // 다른 사람의 풀이:
    // 1. 재귀를 이용한 BFS
    // 2. boolean[][] 배열을 따로 만들지 않고 grid의 값을 바꿈으로써 방문 흔적 기록 -> 공간 절약
    public int numIslands(char[][] grid) {
        this.grid = grid;
        this.height = grid.length;
        this.width = grid[0].length;
        this.visited = new boolean[grid.length][grid[0].length];
        this.queue = new LinkedList<>();

        int island = 0;

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (!visited[i][j] && grid[i][j] == '1') {
                    queue.add(new int[]{i, j});
                    visited[i][j] = true;
                    visitIsland();
                    island++;
                }
            }
        }

        return island;
    }

    private void visitIsland() {
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int k = 0; k < size; k++) {
                int[] coor = queue.poll();
                int x = coor[0];
                int y = coor[1];
                // 방문하지 않았고 1이면 queue에 넣기
                // up
                if (x != 0 && !visited[x - 1][y] && grid[x - 1][y] == '1') {
                    visited[x - 1][y] = true;
                    queue.add(new int[]{x - 1, y});
                }
                // down
                if (x != height - 1 && !visited[x + 1][y] && grid[x + 1][y] == '1') {
                    visited[x + 1][y] = true;
                    queue.add(new int[]{x + 1, y});
                }
                // left
                if (y != 0 && !visited[x][y - 1] && grid[x][y - 1] == '1') {
                    visited[x][y - 1] = true;
                    queue.add(new int[]{x, y - 1});
                }
                // right
                if (y != width - 1 && !visited[x][y + 1] && grid[x][y + 1] == '1') {
                    visited[x][y + 1] = true;
                    queue.add(new int[]{x, y + 1});
                }
            }
        }
    }

}
